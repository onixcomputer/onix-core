┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
║                    MICROVM CREDENTIAL LOADING FLOW                              ║
║                     (systemd LoadCredential + OEM Strings)                      ║
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

═══════════════════════════════════════════════════════════════════════════════════
PHASE 1: SECRET GENERATION (Deployment Time)
═══════════════════════════════════════════════════════════════════════════════════

[Admin runs: clan vars generate --machine britton-desktop]
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ clan.core.vars.generators.test-vm-secrets                                       │
│                                                                                  │
│   script = ''                                                                    │
│     openssl rand -base64 32 | tr -d '\n' > "$out/api-key"                      │
│     openssl rand -base64 32 | tr -d '\n' > "$out/db-password"                  │
│     openssl rand -base64 64 | tr -d '\n' > "$out/jwt-secret"                   │
│     chmod 400 "$out"/*                                                           │
│   ''                                                                             │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                    Secrets encrypted with SOPS
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ STORED: /run/secrets/vars/test-vm-secrets/                                      │
│   ├── api-key          (root:root 0400) ← 44 bytes base64                      │
│   ├── db-password      (root:root 0400) ← 44 bytes base64                      │
│   └── jwt-secret       (root:root 0400) ← 88 bytes base64                      │
│                                                                                  │
│ Storage: tmpfs (memory-backed, encrypted at rest with SOPS)                     │
│ Access: ONLY root can read these files                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 2: SYSTEMD SERVICE CONFIGURATION (Build Time)
═══════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────┐
│ machines/britton-desktop/configuration.nix                                       │
│                                                                                  │
│   systemd.services."microvm@test-vm".serviceConfig.LoadCredential = [          │
│     "host-api-key:/run/secrets/vars/test-vm-secrets/api-key"                   │
│     "host-db-password:/run/secrets/vars/test-vm-secrets/db-password"           │
│     "host-jwt-secret:/run/secrets/vars/test-vm-secrets/jwt-secret"             │
│   ];                                                                             │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                    Built into systemd unit file
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ /etc/systemd/system/microvm@test-vm.service.d/overrides.conf                    │
│                                                                                  │
│   [Service]                                                                      │
│   User=microvm                                                                   │
│   Group=kvm                                                                      │
│   LoadCredential=host-api-key:/run/secrets/vars/test-vm-secrets/api-key        │
│   LoadCredential=host-db-password:/run/secrets/vars/test-vm-secrets/db-password│
│   LoadCredential=host-jwt-secret:/run/secrets/vars/test-vm-secrets/jwt-secret  │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 3: SERVICE START - SYSTEMD CREDENTIAL LOADING (Runtime)
═══════════════════════════════════════════════════════════════════════════════════

[Admin runs: systemctl start microvm@test-vm]
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ SYSTEMD CREDENTIAL LOADER (runs as root, PID 1)                                 │
│                                                                                  │
│ 1. Reads source files (as root):                                                │
│    /run/secrets/vars/test-vm-secrets/api-key (root:root 0400) ✓                │
│                                                                                  │
│ 2. Creates credential directory:                                                │
│    mkdir -m 0500 /run/credentials/microvm@test-vm.service/                      │
│    chown microvm:root /run/credentials/microvm@test-vm.service/                 │
│                                                                                  │
│ 3. Copies each credential with service user ownership:                          │
│    cp api-key → /run/credentials/microvm@test-vm.service/host-api-key          │
│    chown microvm:root host-api-key                                              │
│    chmod 0400 host-api-key                                                       │
│                                                                                  │
│ 4. Sets environment variable:                                                   │
│    CREDENTIALS_DIRECTORY=/run/credentials/microvm@test-vm.service               │
│                                                                                  │
│ 5. Drops privileges to service user:                                            │
│    setuid(microvm), setgid(kvm)                                                 │
│                                                                                  │
│ 6. Executes service:                                                            │
│    exec /var/lib/microvms/test-vm/current/bin/microvm-run                      │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                    NOW RUNNING AS: microvm:kvm
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ CREDENTIAL DIRECTORY STATE:                                                      │
│ /run/credentials/microvm@test-vm.service/    (microvm:root 0500)               │
│   ├── host-api-key          (microvm:root 0400) ← Copy of secret               │
│   ├── host-db-password      (microvm:root 0400) ← Copy of secret               │
│   └── host-jwt-secret       (microvm:root 0400) ← Copy of secret               │
│                                                                                  │
│ Environment: CREDENTIALS_DIRECTORY=/run/credentials/microvm@test-vm.service     │
│ Process User: microvm (uid=981)                                                  │
│ Process Group: kvm (gid=302)                                                     │
│ Can Read: ✓ YES - Files owned by microvm user                                   │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 4: MICROVM-RUN SCRIPT EXECUTION (Runtime - as microvm user)
═══════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────┐
│ /var/lib/microvms/test-vm/current/bin/microvm-run (Bash script)                 │
│                                                                                  │
│ echo "Loading Runtime Secrets via systemd LoadCredential"                       │
│                                                                                  │
│ # Read from credentials directory (owned by microvm user)                       │
│ if [ -n "${CREDENTIALS_DIRECTORY:-}" ]; then                                    │
│   API_KEY=$(cat "$CREDENTIALS_DIRECTORY/host-api-key" | tr -d '\n')            │
│   echo "✓ Loaded API_KEY from credentials"                                      │
│                                                                                  │
│   DB_PASSWORD=$(cat "$CREDENTIALS_DIRECTORY/host-db-password" | tr -d '\n')    │
│   echo "✓ Loaded DB_PASSWORD from credentials"                                  │
│                                                                                  │
│   JWT_SECRET=$(cat "$CREDENTIALS_DIRECTORY/host-jwt-secret" | tr -d '\n')      │
│   echo "✓ Loaded JWT_SECRET from credentials"                                   │
│ fi                                                                               │
│                                                                                  │
│ # Build OEM strings for cloud-hypervisor                                        │
│ RUNTIME_OEM_STRINGS="io.systemd.credential:API_KEY=$API_KEY"                   │
│ RUNTIME_OEM_STRINGS="$RUNTIME_OEM_STRINGS,io.systemd.credential:DB_PASSWORD=..." │
│ RUNTIME_OEM_STRINGS="$RUNTIME_OEM_STRINGS,io.systemd.credential:JWT_SECRET=..." │
│ RUNTIME_OEM_STRINGS="$RUNTIME_OEM_STRINGS,io.systemd.credential:ENVIRONMENT=test"│
│                                                                                  │
│ echo "✓ Runtime secrets loaded and OEM strings prepared"                        │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                    Secrets now in shell variables
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ SHELL VARIABLE STATE (in microvm-run process memory):                           │
│   API_KEY="gtcaOXNCOWUeR0FwdpBzTwYK/XAd5QqqxX5/mKcazEU="                        │
│   DB_PASSWORD="Gd8+b4jTVMDax1VZYDhZi3CDp+EriPFmaHZxuurJKVM="                    │
│   JWT_SECRET="zo7HUwIXrMXHyonmP8D5gEMHShSkR+dilJpgYbXbdOBmI..."                │
│   RUNTIME_OEM_STRINGS="io.systemd.credential:API_KEY=...,io.systemd..."         │
│                                                                                  │
│ Security: Process memory only, never written to disk                             │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 5: CLOUD-HYPERVISOR LAUNCH (Runtime)
═══════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────┐
│ LAUNCH COMMAND:                                                                  │
│                                                                                  │
│ exec cloud-hypervisor \                                                          │
│   --cpus boot=2 \                                                                │
│   --memory size=1024M \                                                          │
│   --kernel /nix/store/.../vmlinux \                                              │
│   --initramfs /nix/store/.../initrd \                                            │
│   --platform "oem_strings=[                                                      │
│     io.systemd.credential:API_KEY=$API_KEY,                                     │
│     io.systemd.credential:DB_PASSWORD=$DB_PASSWORD,                             │
│     io.systemd.credential:JWT_SECRET=$JWT_SECRET,                               │
│     io.systemd.credential:ENVIRONMENT=test,                                     │
│     io.systemd.credential:CLUSTER=britton-desktop                               │
│   ]" \                                                                           │
│   --vsock cid=3,socket=notify.vsock \                                            │
│   --net tap=vm-test,mac=02:00:00:01:01:01                                        │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                Shell expands $API_KEY variables
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ CLOUD-HYPERVISOR PROCESS:                                                        │
│   PID: 22092                                                                     │
│   User: microvm                                                                  │
│   Command line (visible in /proc/22092/cmdline):                                │
│     --platform "oem_strings=[io.systemd.credential:API_KEY=gtcaOXNC...]"       │
│                                                                                  │
│ ⚠️  Security Note: Secrets visible in process command line                      │
│     - Readable by: root, microvm user, kvm group members                        │
│     - Duration: While VM is running                                              │
│     - Acceptable: For trusted single-admin environments                          │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
            cloud-hypervisor writes to SMBIOS Type 11
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ SMBIOS TYPE 11 (OEM Strings) in Virtual Hardware:                               │
│                                                                                  │
│   String 0: "io.systemd.credential:API_KEY=gtcaOXNCOWUeR0FwdpBzTwYK..."         │
│   String 1: "io.systemd.credential:DB_PASSWORD=Gd8+b4jTVMDax1VZYDhZi..."        │
│   String 2: "io.systemd.credential:JWT_SECRET=zo7HUwIXrMXHyonmP8D5gEM..."       │
│   String 3: "io.systemd.credential:ENVIRONMENT=test"                            │
│   String 4: "io.systemd.credential:CLUSTER=britton-desktop"                     │
│                                                                                  │
│ Location: Virtual firmware table (readable via /sys/firmware/dmi/)              │
│ Transmission: No network involved, hardware emulation only                       │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 6: GUEST BOOT - SYSTEMD CREDENTIAL IMPORT (Guest Runtime)
═══════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────┐
│ GUEST KERNEL BOOTS (Linux 6.12.48)                                              │
│   ↓                                                                              │
│ GUEST SYSTEMD STARTS (PID 1 in guest)                                           │
│   ↓                                                                              │
│ systemd-boot reads /sys/firmware/dmi/tables/DMI                                 │
│   ↓                                                                              │
│ Parses SMBIOS Type 11 OEM Strings                                               │
│   ↓                                                                              │
│ Creates system-wide credentials:                                                │
│   /run/credentials/@system/API_KEY         (root:root 0400)                     │
│   /run/credentials/@system/DB_PASSWORD     (root:root 0400)                     │
│   /run/credentials/@system/JWT_SECRET      (root:root 0400)                     │
│   /run/credentials/@system/ENVIRONMENT     (root:root 0400)                     │
│   /run/credentials/@system/CLUSTER         (root:root 0400)                     │
│                                                                                  │
│ Storage: Guest tmpfs (memory-only, never on disk)                               │
│ Lifetime: Until guest shutdown                                                  │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
PHASE 7: GUEST SERVICE CONSUMPTION (Guest Runtime)
═══════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────┐
│ GUEST SERVICE: demo-oem-credentials.service                                      │
│                                                                                  │
│   [Service]                                                                      │
│   LoadCredential = [                                                             │
│     "environment:ENVIRONMENT"    ← Loads from @system credential                │
│     "cluster:CLUSTER"            ← Loads from @system credential                │
│     "api-key:API_KEY"            ← Loads from @system credential                │
│     "db-password:DB_PASSWORD"    ← Loads from @system credential                │
│     "jwt-secret:JWT_SECRET"      ← Loads from @system credential                │
│   ]                                                                              │
│                                                                                  │
│   script = ''                                                                    │
│     echo "API_KEY = $(wc -c < $CREDENTIALS_DIRECTORY/api-key) bytes"           │
│     echo "DB_PASSWORD = $(wc -c < $CREDENTIALS_DIRECTORY/db-password) bytes"   │
│     echo "JWT_SECRET = $(wc -c < $CREDENTIALS_DIRECTORY/jwt-secret) bytes"     │
│   ''                                                                             │
└─────────────────────────────────────────────────────────────────────────────────┘
                              ↓
                    systemd copies credentials
                              ↓
┌─────────────────────────────────────────────────────────────────────────────────┐
│ SERVICE CREDENTIAL DIRECTORY (in guest):                                         │
│ /run/credentials/demo-oem-credentials.service/                                  │
│   ├── environment     (demo-svc-user:root 0400) ← "test"                       │
│   ├── cluster         (demo-svc-user:root 0400) ← "britton-desktop"            │
│   ├── api-key         (demo-svc-user:root 0400) ← 44 bytes                     │
│   ├── db-password     (demo-svc-user:root 0400) ← 44 bytes                     │
│   └── jwt-secret      (demo-svc-user:root 0400) ← 88 bytes                     │
│                                                                                  │
│ Environment: CREDENTIALS_DIRECTORY=/run/credentials/demo-oem-credentials.service│
│ Accessible by: Only the demo-oem-credentials service                            │
└─────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════
SUMMARY: COMPLETE CREDENTIAL FLOW
═══════════════════════════════════════════════════════════════════════════════════

1. GENERATION:    clan vars → /run/secrets/vars/ (SOPS encrypted, root:root 0400)
2. HOST SERVICE:  systemd LoadCredential → /run/credentials/microvm@.service/ (microvm-owned)
3. SCRIPT:        microvm-run reads credentials → shell variables
4. HYPERVISOR:    cloud-hypervisor --platform oem_strings=[...] (SMBIOS injection)
5. GUEST BOOT:    systemd reads SMBIOS → /run/credentials/@system/ (system-wide)
6. GUEST SERVICE: LoadCredential → /run/credentials/<service>/ (service-specific)

SECURITY PROPERTIES:
✓ Host secrets remain root-only (root:root 0400)
✓ No permission modifications needed
✓ Process isolation at each stage
✓ Memory-only storage (tmpfs, no disk persistence)
✓ Automatic cleanup (systemd managed)
✓ Service-specific access controls
✓ Ephemeral in guest (destroyed on shutdown)

VISIBILITY:
- Host secrets: Only root
- Host credentials: Only microvm service
- Hypervisor cmdline: root, microvm user, kvm group (acceptable for trusted host)
- Guest credentials: Per-service isolation

TRANSMISSION:
No network involved - all local:
  Host tmpfs → systemd → script memory → hypervisor → SMBIOS → guest tmpfs

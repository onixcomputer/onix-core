# OpenTofu Library Real Provider Integration Tests
# Tests that validate our terranix-generated configurations work with actual terraform execution
# Run via: nix build .#legacyPackages.x86_64-linux.opentofu-terraform-execution-tests
{ pkgs, lib }:

let
  # Import the opentofu library
  opentofu = import ./default.nix { inherit lib pkgs; };

  # Test terraform configurations using safe providers that don't require external resources

  # 1. Null Provider Test - Completely safe, no external dependencies
  nullProviderTerranixModule = _: {
    terraform = {
      required_version = ">= 1.0";
      required_providers = {
        null = {
          source = "hashicorp/null";
          version = "~> 3.2";
        };
      };
    };

    provider.null = { };

    variable = {
      test_message = {
        description = "Test message for null resource";
        type = "string";
        default = "Hello from terraform execution test";
      };
      iteration_count = {
        description = "Number of iterations";
        type = "number";
        default = 2;
      };
    };

    resource = {
      null_resource = {
        test_basic = {
          triggers = {
            message = "$${var.test_message}";
            timestamp = "$${timestamp()}";
          };
          provisioner = {
            local-exec = {
              command = "echo 'Basic null resource created: $${var.test_message}'";
            };
          };
        };

        test_count = {
          count = "\${var.iteration_count}";
          triggers = {
            index = "\${count.index}";
            message = "Iteration \${count.index} of \${var.test_message}";
          };
          provisioner = {
            local-exec = {
              command = "echo 'Count resource \${count.index}: \${self.triggers.message}'";
            };
          };
        };

        test_depends_on = {
          depends_on = [ "null_resource.test_basic" ];
          triggers = {
            dependency_id = "\${null_resource.test_basic.id}";
          };
          provisioner = {
            local-exec = {
              command = "echo 'Dependent resource created after: \${self.triggers.dependency_id}'";
            };
          };
        };
      };
    };

    output = {
      basic_resource_id = {
        description = "ID of the basic null resource";
        value = "\${null_resource.test_basic.id}";
      };
      count_resource_ids = {
        description = "IDs of all count-based resources";
        value = "\${null_resource.test_count[*].id}";
      };
      dependent_resource_id = {
        description = "ID of the dependent resource";
        value = "\${null_resource.test_depends_on.id}";
      };
      test_summary = {
        description = "Summary of test resources";
        value = {
          basic_id = "\${null_resource.test_basic.id}";
          count_ids = "\${null_resource.test_count[*].id}";
          dependent_id = "\${null_resource.test_depends_on.id}";
          total_resources = "\${length(null_resource.test_count) + 2}";
        };
      };
    };
  };

  # 2. Local Provider Test - File operations, safe but creates temporary files
  localProviderTerranixModule = _: {
    terraform = {
      required_version = ">= 1.0";
      required_providers = {
        local = {
          source = "hashicorp/local";
          version = "~> 2.4";
        };
      };
    };

    provider.local = { };

    variable = {
      content_prefix = {
        description = "Prefix for file content";
        type = "string";
        default = "terraform-test";
      };
      file_permissions = {
        description = "File permissions in octal";
        type = "string";
        default = "0644";
      };
    };

    resource = {
      local_file = {
        test_basic = {
          filename = "/tmp/terraform-test-basic.txt";
          content = "\${var.content_prefix}: Basic file content generated by terraform";
          file_permission = "\${var.file_permissions}";
        };

        test_template = {
          filename = "/tmp/terraform-test-template.json";
          content = ''
            jsonencode({
                        test_id = "$${local_file.test_basic.id}"
                        timestamp = "$${timestamp()}"
                        content_prefix = "$${var.content_prefix}"
                        file_info = {
                          basic_filename = "$${local_file.test_basic.filename}"
                          basic_content_md5 = "$${local_file.test_basic.content_md5}"
                        }
                      })'';
          file_permission = "\${var.file_permissions}";
        };

        test_sensitive = {
          filename = "/tmp/terraform-test-sensitive.txt";
          content = "This file contains sensitive test data: \${var.content_prefix}";
          file_permission = "0600";
          sensitive_content = true;
        };
      };
    };

    output = {
      basic_file_id = {
        description = "ID of basic test file";
        value = "\${local_file.test_basic.id}";
      };
      basic_file_md5 = {
        description = "MD5 hash of basic test file";
        value = "\${local_file.test_basic.content_md5}";
      };
      template_file_content = {
        description = "Content of the template file";
        value = "\${local_file.test_template.content}";
      };
      sensitive_file_id = {
        description = "ID of sensitive file (content hidden)";
        value = "\${local_file.test_sensitive.id}";
        sensitive = true;
      };
      all_files = {
        description = "Summary of all created files";
        value = {
          basic = {
            filename = "\${local_file.test_basic.filename}";
            md5 = "\${local_file.test_basic.content_md5}";
          };
          template = {
            filename = "\${local_file.test_template.filename}";
            md5 = "\${local_file.test_template.content_md5}";
          };
          sensitive = {
            filename = "\${local_file.test_sensitive.filename}";
            # MD5 not included for sensitive file
          };
        };
      };
    };
  };

  # 3. Random Provider Test - State management and deterministic randomness
  randomProviderTerranixModule = _: {
    terraform = {
      required_version = ">= 1.0";
      required_providers = {
        random = {
          source = "hashicorp/random";
          version = "~> 3.6";
        };
      };
    };

    provider.random = { };

    variable = {
      password_length = {
        description = "Length of generated passwords";
        type = "number";
        default = 16;
      };
      id_byte_length = {
        description = "Byte length for random IDs";
        type = "number";
        default = 8;
      };
    };

    resource = {
      random_password = {
        admin_password = {
          length = "\${var.password_length}";
          special = true;
          upper = true;
          lower = true;
          numeric = true;
          min_special = 2;
          min_upper = 2;
          min_lower = 2;
          min_numeric = 2;
        };

        api_key = {
          length = 32;
          special = false;
          upper = true;
          lower = true;
          numeric = true;
        };
      };

      random_id = {
        server_id = {
          byte_length = "\${var.id_byte_length}";
          prefix = "srv-";
        };

        session_id = {
          byte_length = 16;
          prefix = "sess-";
        };
      };

      random_uuid = {
        service_uuid = { };

        correlation_id = { };
      };

      random_integer = {
        port_number = {
          min = 8000;
          max = 9000;
          seed = "terraform-test";
        };

        priority = {
          min = 1;
          max = 100;
        };
      };

      random_string = {
        username = {
          length = 12;
          special = false;
          upper = false;
          lower = true;
          numeric = true;
        };
      };
    };

    output = {
      server_identifier = {
        description = "Generated server identifier";
        value = "\${random_id.server_id.hex}";
      };
      service_uuid = {
        description = "Generated service UUID";
        value = "\${random_uuid.service_uuid.result}";
      };
      port_assignment = {
        description = "Assigned port number";
        value = "\${random_integer.port_number.result}";
      };
      username = {
        description = "Generated username";
        value = "\${random_string.username.result}";
      };
      # Sensitive outputs
      admin_password_length = {
        description = "Length of generated admin password";
        value = "\${length(random_password.admin_password.result)}";
      };
      api_key_length = {
        description = "Length of generated API key";
        value = "\${length(random_password.api_key.result)}";
      };
      # Summary
      generated_resources = {
        description = "Summary of all generated random resources";
        value = {
          server_id = "\${random_id.server_id.hex}";
          session_id = "\${random_id.session_id.hex}";
          service_uuid = "\${random_uuid.service_uuid.result}";
          correlation_id = "\${random_uuid.correlation_id.result}";
          port = "\${random_integer.port_number.result}";
          priority = "\${random_integer.priority.result}";
          username = "\${random_string.username.result}";
          # Passwords excluded for security
        };
      };
    };
  };

  # 4. Combined Multi-Provider Test - Tests interaction between providers
  combinedProviderTerranixModule = _: {
    terraform = {
      required_version = ">= 1.0";
      required_providers = {
        null = {
          source = "hashicorp/null";
          version = "~> 3.2";
        };
        local = {
          source = "hashicorp/local";
          version = "~> 2.4";
        };
        random = {
          source = "hashicorp/random";
          version = "~> 3.6";
        };
      };
    };

    provider = {
      null = { };
      local = { };
      random = { };
    };

    variable = {
      deployment_name = {
        description = "Name of the deployment";
        type = "string";
        default = "terraform-integration-test";
      };
    };

    resource = {
      # Generate random deployment ID
      random_id = {
        deployment_id = {
          byte_length = 4;
          prefix = "\${var.deployment_name}-";
        };
      };

      # Create deployment info file
      local_file = {
        deployment_info = {
          filename = "/tmp/$${random_id.deployment_id.hex}.json";
          content = ''
            jsonencode({
                        deployment_id = "$${random_id.deployment_id.hex}"
                        deployment_name = "$${var.deployment_name}"
                        created_at = "$${timestamp()}"
                        resources = {
                          null_resources = 1
                          local_files = 1
                          random_ids = 1
                        }
                      })'';
          file_permission = "0644";
        };
      };

      # Orchestrate with null resource
      null_resource = {
        deployment_coordinator = {
          depends_on = [
            "random_id.deployment_id"
            "local_file.deployment_info"
          ];
          triggers = {
            deployment_id = "\${random_id.deployment_id.hex}";
            info_file = "\${local_file.deployment_info.filename}";
            info_md5 = "\${local_file.deployment_info.content_md5}";
          };
          provisioner = {
            local-exec = {
              command = "echo 'Deployment \${random_id.deployment_id.hex} coordinated with info file \${local_file.deployment_info.filename}'";
            };
          };
        };
      };
    };

    output = {
      deployment_id = {
        description = "Generated deployment identifier";
        value = "\${random_id.deployment_id.hex}";
      };
      deployment_info_file = {
        description = "Path to deployment info file";
        value = "\${local_file.deployment_info.filename}";
      };
      coordinator_id = {
        description = "Deployment coordinator resource ID";
        value = "\${null_resource.deployment_coordinator.id}";
      };
      deployment_summary = {
        description = "Complete deployment summary";
        value = {
          id = "\${random_id.deployment_id.hex}";
          name = "\${var.deployment_name}";
          info_file = "\${local_file.deployment_info.filename}";
          coordinator = "\${null_resource.deployment_coordinator.id}";
          file_md5 = "\${local_file.deployment_info.content_md5}";
        };
      };
    };
  };

  # 5. Error Testing Module - Intentionally invalid configuration
  invalidTerranixModule = _: {
    terraform = {
      required_version = ">= 1.0";
      required_providers = {
        nonexistent = {
          source = "hashicorp/nonexistent";
          version = "~> 1.0";
        };
      };
    };

    provider.nonexistent = { };

    resource = {
      nonexistent_resource = {
        test = {
          # This should fail during terraform init/plan
          invalid_attribute = "this will cause an error";
        };
      };
    };
  };

  # Generate JSON configurations for each test
  nullProviderConfig = opentofu.generateTerranixJson {
    module = nullProviderTerranixModule;
    fileName = "null-provider-test.json";
  };

  localProviderConfig = opentofu.generateTerranixJson {
    module = localProviderTerranixModule;
    fileName = "local-provider-test.json";
  };

  randomProviderConfig = opentofu.generateTerranixJson {
    module = randomProviderTerranixModule;
    fileName = "random-provider-test.json";
  };

  combinedProviderConfig = opentofu.generateTerranixJson {
    module = combinedProviderTerranixModule;
    fileName = "combined-provider-test.json";
  };

  invalidProviderConfig = opentofu.generateTerranixJson {
    module = invalidTerranixModule;
    fileName = "invalid-provider-test.json";
    validate = false; # Skip validation for intentionally invalid config
  };

  # Test runner script that executes terraform commands
  testRunner = pkgs.writeShellScript "terraform-execution-test-runner" ''
    set -euo pipefail

    echo "=== OpenTofu Library Terraform Execution Tests ==="
    echo "Testing real terraform execution with terranix-generated configurations"
    echo ""

    # Create isolated test environment
    TEST_DIR=$(mktemp -d)
    echo "Test directory: $TEST_DIR"

    # Cleanup function
    cleanup() {
      echo "Cleaning up test directory: $TEST_DIR"
      rm -rf "$TEST_DIR"
      # Clean up any test files in /tmp
      rm -f /tmp/terraform-test-*.txt /tmp/terraform-test-*.json
      rm -f /tmp/terraform-integration-test-*.json
    }
    trap cleanup EXIT

    cd "$TEST_DIR"

    # Test counter
    TESTS_RUN=0
    TESTS_PASSED=0
    TESTS_FAILED=0

    # Test execution function
    run_terraform_test() {
      local test_name="$1"
      local config_file="$2"
      local should_succeed="$3"
      local test_dir="$TEST_DIR/$test_name"

      echo "--- Test: $test_name ---"
      TESTS_RUN=$((TESTS_RUN + 1))

      mkdir -p "$test_dir"
      cd "$test_dir"

      # Copy configuration
      cp "$config_file" main.tf.json

      echo "Configuration preview:"
      head -20 main.tf.json || true
      echo ""

      # Initialize terraform
      echo "Running: terraform init"
      if ${pkgs.opentofu}/bin/tofu init -input=false; then
        echo "✓ terraform init succeeded"
      else
        echo "✗ terraform init failed"
        if [ "$should_succeed" = "true" ]; then
          TESTS_FAILED=$((TESTS_FAILED + 1))
          return 1
        else
          echo "  (Expected failure for this test)"
          TESTS_PASSED=$((TESTS_PASSED + 1))
          return 0
        fi
      fi

      # Plan terraform
      echo "Running: terraform plan"
      if ${pkgs.opentofu}/bin/tofu plan -out=tfplan -detailed-exitcode; then
        PLAN_EXIT=0
      else
        PLAN_EXIT=$?
      fi

      case "$PLAN_EXIT" in
        0)
          echo "✓ terraform plan succeeded (no changes)"
          if [ "$should_succeed" = "true" ]; then
            TESTS_PASSED=$((TESTS_PASSED + 1))
          else
            echo "  (Unexpected success for this test)"
            TESTS_FAILED=$((TESTS_FAILED + 1))
            return 1
          fi
          ;;
        1)
          echo "✗ terraform plan failed"
          if [ "$should_succeed" = "true" ]; then
            TESTS_FAILED=$((TESTS_FAILED + 1))
            return 1
          else
            echo "  (Expected failure for this test)"
            TESTS_PASSED=$((TESTS_PASSED + 1))
            return 0
          fi
          ;;
        2)
          echo "✓ terraform plan succeeded (changes to apply)"
          if [ "$should_succeed" = "false" ]; then
            echo "  (Unexpected success for this test)"
            TESTS_FAILED=$((TESTS_FAILED + 1))
            return 1
          fi

          # Apply changes
          echo "Running: terraform apply"
          if ${pkgs.opentofu}/bin/tofu apply -auto-approve tfplan; then
            echo "✓ terraform apply succeeded"

            # Show outputs
            echo "Terraform outputs:"
            ${pkgs.opentofu}/bin/tofu output -json || true

            # Destroy resources for cleanup
            echo "Running: terraform destroy"
            if ${pkgs.opentofu}/bin/tofu destroy -auto-approve; then
              echo "✓ terraform destroy succeeded"
              TESTS_PASSED=$((TESTS_PASSED + 1))
            else
              echo "✗ terraform destroy failed"
              TESTS_FAILED=$((TESTS_FAILED + 1))
              return 1
            fi
          else
            echo "✗ terraform apply failed"
            TESTS_FAILED=$((TESTS_FAILED + 1))
            return 1
          fi
          ;;
      esac

      echo ""
    }

    # Run tests
    echo "Starting terraform execution tests..."
    echo ""

    # Test 1: Null Provider (should succeed)
    run_terraform_test "null-provider" "${nullProviderConfig}" "true" || true

    # Test 2: Local Provider (should succeed)
    run_terraform_test "local-provider" "${localProviderConfig}" "true" || true

    # Test 3: Random Provider (should succeed)
    run_terraform_test "random-provider" "${randomProviderConfig}" "true" || true

    # Test 4: Combined Providers (should succeed)
    run_terraform_test "combined-providers" "${combinedProviderConfig}" "true" || true

    # Test 5: Invalid Configuration (should fail)
    run_terraform_test "invalid-config" "${invalidProviderConfig}" "false" || true

    # Test summary
    echo "=== Test Summary ==="
    echo "Tests run: $TESTS_RUN"
    echo "Tests passed: $TESTS_PASSED"
    echo "Tests failed: $TESTS_FAILED"
    echo ""

    if [ "$TESTS_FAILED" -eq 0 ] && [ "$TESTS_PASSED" -gt 0 ]; then
      echo "🎉 All terraform execution tests passed!"
      echo "The OpenTofu library successfully generates terraform-compatible configurations!"
      exit 0
    else
      echo "❌ Some terraform execution tests failed"
      echo "Check the output above for details"
      exit 1
    fi
  '';

in
pkgs.runCommand "opentofu-terraform-execution-tests"
  {
    preferLocalBuild = true;
    # Include opentofu in the build environment for the test runner
    nativeBuildInputs = [ pkgs.opentofu ];
  }
  ''
    echo "=== OpenTofu Library Terraform Execution Tests ==="
    echo "This test validates that terranix-generated configurations work with real terraform"
    echo ""

    # Verify test configurations were generated
    echo "Checking generated terraform configurations..."

    echo "Null provider config: ${nullProviderConfig}"
    test -f "${nullProviderConfig}"
    echo "✓ Null provider configuration generated"

    echo "Local provider config: ${localProviderConfig}"
    test -f "${localProviderConfig}"
    echo "✓ Local provider configuration generated"

    echo "Random provider config: ${randomProviderConfig}"
    test -f "${randomProviderConfig}"
    echo "✓ Random provider configuration generated"

    echo "Combined provider config: ${combinedProviderConfig}"
    test -f "${combinedProviderConfig}"
    echo "✓ Combined provider configuration generated"

    echo "Invalid provider config: ${invalidProviderConfig}"
    test -f "${invalidProviderConfig}"
    echo "✓ Invalid provider configuration generated (for error testing)"

    # Validate JSON syntax of generated configurations
    echo ""
    echo "Validating JSON syntax of generated configurations..."

    ${pkgs.jq}/bin/jq . "${nullProviderConfig}" > /dev/null
    echo "✓ Null provider configuration has valid JSON syntax"

    ${pkgs.jq}/bin/jq . "${localProviderConfig}" > /dev/null
    echo "✓ Local provider configuration has valid JSON syntax"

    ${pkgs.jq}/bin/jq . "${randomProviderConfig}" > /dev/null
    echo "✓ Random provider configuration has valid JSON syntax"

    ${pkgs.jq}/bin/jq . "${combinedProviderConfig}" > /dev/null
    echo "✓ Combined provider configuration has valid JSON syntax"

    ${pkgs.jq}/bin/jq . "${invalidProviderConfig}" > /dev/null
    echo "✓ Invalid provider configuration has valid JSON syntax"

    # Check for expected terraform blocks in configurations
    echo ""
    echo "Validating terraform configuration structure..."

    ${pkgs.jq}/bin/jq -e '.terraform.required_providers.null' "${nullProviderConfig}" > /dev/null
    echo "✓ Null provider configuration has required provider block"

    ${pkgs.jq}/bin/jq -e '.terraform.required_providers.local' "${localProviderConfig}" > /dev/null
    echo "✓ Local provider configuration has required provider block"

    ${pkgs.jq}/bin/jq -e '.terraform.required_providers.random' "${randomProviderConfig}" > /dev/null
    echo "✓ Random provider configuration has required provider block"

    ${pkgs.jq}/bin/jq -e '.terraform.required_providers | keys | length >= 3' "${combinedProviderConfig}" > /dev/null
    echo "✓ Combined provider configuration has multiple provider blocks"

    # Check for resources in configurations
    ${pkgs.jq}/bin/jq -e '.resource.null_resource' "${nullProviderConfig}" > /dev/null
    echo "✓ Null provider configuration has null resources"

    ${pkgs.jq}/bin/jq -e '.resource.local_file' "${localProviderConfig}" > /dev/null
    echo "✓ Local provider configuration has local file resources"

    ${pkgs.jq}/bin/jq -e '.resource.random_password' "${randomProviderConfig}" > /dev/null
    echo "✓ Random provider configuration has random resources"

    # Check for outputs in configurations
    ${pkgs.jq}/bin/jq -e '.output' "${nullProviderConfig}" > /dev/null
    echo "✓ Null provider configuration has outputs"

    ${pkgs.jq}/bin/jq -e '.output' "${localProviderConfig}" > /dev/null
    echo "✓ Local provider configuration has outputs"

    ${pkgs.jq}/bin/jq -e '.output' "${randomProviderConfig}" > /dev/null
    echo "✓ Random provider configuration has outputs"

    echo ""
    echo "Configuration validation completed successfully!"
    echo ""
    echo "Test configurations are ready for terraform execution testing."
    echo "To run actual terraform execution tests, execute: ${testRunner}"
    echo ""
    echo "Generated configurations:"
    echo "  - Null provider: ${nullProviderConfig}"
    echo "  - Local provider: ${localProviderConfig}"
    echo "  - Random provider: ${randomProviderConfig}"
    echo "  - Combined providers: ${combinedProviderConfig}"
    echo "  - Invalid config: ${invalidProviderConfig}"
    echo ""
    echo "🎉 All terraform execution test preparations completed!"

    # Create output marker
    touch $out
    echo "Test completed successfully" > $out
  ''
